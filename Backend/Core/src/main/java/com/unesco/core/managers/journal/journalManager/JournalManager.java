package com.unesco.core.managers.journal.journalManager;

import com.unesco.core.dto.account.RoleDTO;
import com.unesco.core.dto.account.StudentDTO;
import com.unesco.core.dto.account.UserDTO;
import com.unesco.core.dto.additional.ResponseStatusDTO;
import com.unesco.core.dto.enums.PointTypes;
import com.unesco.core.dto.enums.RoleType;
import com.unesco.core.dto.enums.StatusTypes;
import com.unesco.core.dto.journal.*;
import com.unesco.core.dto.shedule.GroupDTO;
import com.unesco.core.dto.shedule.PairDTO;
import com.unesco.core.managers.journal.journalManager.interfaces.journal.IJournalManager;
import com.unesco.core.managers.journal.lessonEvent.interfaces.lessonEventList.ILessonEventListManager;
import com.unesco.core.utils.DateHelper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.stream.Collectors;

@Component
@Scope("prototype")
public class JournalManager implements IJournalManager {

    @Autowired
    private ILessonEventListManager lessonEventListManager;

    private JournalDTO journal;
    private List<LessonEventDTO> lessonEvents;
    private VisitationConfigDTO visitConfig;

    public JournalManager() {
        journal = new JournalDTO();
    }

    public void init(JournalDTO journal, List<LessonEventDTO> lessonEvents, VisitationConfigDTO visitConfig)
    {
        this.journal = journal;
        this.lessonEvents = lessonEvents;
        this.visitConfig = visitConfig;
    }

    public void CreateJournal()
    {
        if(!visitConfig.isAutoGenerated() && !visitConfig.getDates().isEmpty()) {
            List<ComparisonDTO> сomparison = journal.getComparison();
            for (Date date : journal.getComparison().stream().map(x -> x.getDate()).collect(Collectors.toList())) {
                if(visitConfig.getDates().stream().noneMatch(x -> x == date)) {
                    сomparison.remove(сomparison.stream().filter(x -> x.getDate() == date).findFirst());
                }
            }
            journal.setComparison(сomparison);
        }

        // !!! Тестовое условие, удалить.
        if (journal.getStudents().size() == 0) {
            StudentDTO testStud = new StudentDTO();
            UserDTO testUser = new UserDTO();
            testUser.setRoles(Collections.singletonList(new RoleDTO() {{
                setRoleName(RoleType.STUDENT.toString());
            }}));
            testUser.setUserFIO("Testing");
            testUser.setUsername("Testing");
            testStud.setUser(testUser);
            testStud.setGroup(new GroupDTO() {{setName("test");}});
            journal.setStudents( new ArrayList<StudentDTO>() {{ add(testStud); }});
        }

        lessonEventListManager.init(lessonEvents);
        lessonEventListManager.ApplayFilter(this.journal.getLesson());
        lessonEventListManager.RemoveWithoutDates();
        List<LessonEventDTO> LessonEvents = lessonEventListManager.getAll();
        // Сортировка дат
        journal.getComparison().sort(Comparator.comparing(ComparisonDTO::getDate));

        for (LessonEventDTO currentLessonEvent : LessonEvents) {
            if(this.journal.getComparison().stream().anyMatch( o ->
                            DateHelper.getZeroTimeDate(currentLessonEvent.getDate()).equals(DateHelper.getZeroTimeDate(o.getDate()))
                    )) {
                if(this.journal.getComparison().stream().noneMatch(
                        o -> o.getPoints().stream().anyMatch(y ->
                                y.getType().getId() == currentLessonEvent.getType().getId()
                                && currentLessonEvent.getPair().getId() == y.getPair().getId())))
                {
                   ComparisonDTO find = this.journal.getComparison().stream().filter(x ->
                           DateHelper.getZeroTimeDate(currentLessonEvent.getDate()).equals(DateHelper.getZeroTimeDate(x.getDate()))).collect(Collectors.toList()).get(0);

                   List<PairDTO> pairs = new ArrayList<PairDTO>();

                   if(currentLessonEvent.getPair()==null) {
                       pairs.addAll(this.journal.getComparison().stream().filter(x -> DateHelper.getZeroTimeDate(x.getDate()).equals(DateHelper.getZeroTimeDate(currentLessonEvent.getDate())))
                               .collect(Collectors.toList()).get(0).getPoints().stream().map(x -> x.getPair()).collect(Collectors.toList()));
                   } else {
                       pairs.add(currentLessonEvent.getPair());
                   }

                   List<ComparisonPointDTO> points = find.getPoints();
                   for(PairDTO p : pairs) {
                       ComparisonPointDTO point = new ComparisonPointDTO();
                       point.setPair(p);
                       point.setType(currentLessonEvent.getType());
                       points.add(point);
                   }
                   find.setPoints(points);
                }
            }
        }

    }

    public List<Date> GetDates()
    {
        return journal.getComparison().stream().map(ComparisonDTO::getDate).collect(Collectors.toList());
    }

    public ResponseStatusDTO validate() {
        ResponseStatusDTO responseStatusDTO = new ResponseStatusDTO();
        responseStatusDTO.setStatus(StatusTypes.OK);
        DateFormat df = new SimpleDateFormat("dd.MM.yyyy");

        for(PointDTO cell : this.journal.getJournalCell()) {

            if(cell.getType().getName().equals(PointTypes.Visitation.toString())) {
                if (cell.getValue() > visitConfig.getValue()) {
                    responseStatusDTO.setStatus(StatusTypes.ERROR);
                    responseStatusDTO.addErrors("В ячейке указан не верный балл "+cell.getValue()
                            +" из "+visitConfig.getValue()+" ("+PointTypes.Visitation.toString()+")");
                }
            } else {
                LessonEventDTO lessonEventDTO = lessonEvents.stream().filter(o -> o.getType().getId() == cell.getType().getId()).findFirst().get();
                if(cell.getValue() > lessonEventDTO.getMaxValue()) {
                    responseStatusDTO.setStatus(StatusTypes.ERROR);
                    responseStatusDTO.addErrors("В ячейке указан не верный балл "+cell.getValue()
                            +" из "+lessonEventDTO.getMaxValue()+" ("+lessonEventDTO.getType().getName()+")");
                }
            }

        }

        return responseStatusDTO;
    }

    public JournalDTO get() {
        return journal;
    }

    private String translateDay(int dayNum) {
        switch (dayNum) {
            case 1:
                return "Воскресенье";
            case 2:
                return "Понедельник";
            case 3:
                return "Вторник";
            case 4:
                return "Среда";
            case 5:
                return "Четверг";
            case 6:
                return "Пятница";
            case 7:
                return "Суббота";
        }
        return "";
    }

    public CertificationReportDto CertificationReportDto(Date start, Date end) {
        CertificationReportDto result = new CertificationReportDto();

        double allhours = 0;
        for (ComparisonDTO comp : this.journal.getComparison().stream().filter(
                x -> x.getDate().compareTo(DateHelper.getZeroTimeDate(start)) >= 0
                    && x.getDate().compareTo(DateHelper.getZeroTimeDate(end)) <= 0).collect(Collectors.toList())) {
            allhours += comp.getPoints().size() * 2;
        }
        result.setAllHours(allhours);

        List<CertificationStudentDto> studentCertification = new ArrayList<>();
        for (StudentDTO student : this.journal.getStudents()) {
            List<PointDTO> cells = this.journal.getJournalCell().stream().filter(
                    x -> x.getStudentId() == student.getId()
                            && x.getDate().compareTo(DateHelper.getZeroTimeDate(start)) >= 0
                            && x.getDate().compareTo(DateHelper.getZeroTimeDate(end)) <= 0).collect(Collectors.toList());

            CertificationStudentDto certificationStudentDto = new CertificationStudentDto();
            double visitedHours = 0;

            for (PointDTO cell : cells) {
                if(cell.getValue() > 0)
                    visitedHours += 2;
            }

            certificationStudentDto.setMissingHours(result.getAllHours() - visitedHours);
            certificationStudentDto.setStudent(student);

            int resultCertificationValue = 0;
            if(visitedHours > result.getAllHours() / 3) resultCertificationValue = 1;
            if(visitedHours > ((result.getAllHours() / 3) * 2)) resultCertificationValue = 2;

            certificationStudentDto.setValue(resultCertificationValue);
            studentCertification.add(certificationStudentDto);
        }

        result.setStudentCertification(studentCertification);

        return result;
    }

}
